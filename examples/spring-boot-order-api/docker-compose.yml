version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: order-api-postgres
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: orderuser
      POSTGRES_PASSWORD: orderpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - order-api-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orderuser -d orderdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: order-api-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - order-api-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ActiveMQ Message Broker
  activemq:
    image: apache/activemq-artemis:2.31.2
    container_name: order-api-activemq
    environment:
      ARTEMIS_USER: admin
      ARTEMIS_PASSWORD: admin
    ports:
      - "61616:61616"  # JMS port
      - "8161:8161"    # Web console
    volumes:
      - activemq_data:/var/lib/artemis-instance
    networks:
      - order-api-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8161/console/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Application
  order-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: order-api-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: orderuser
      SPRING_DATASOURCE_PASSWORD: orderpass
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_ACTIVEMQ_BROKER_URL: tcp://activemq:61616
      SPRING_ACTIVEMQ_USER: admin
      SPRING_ACTIVEMQ_PASSWORD: admin
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      activemq:
        condition: service_healthy
    networks:
      - order-api-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/api/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: order-api-adminer
    ports:
      - "8081:8080"
    networks:
      - order-api-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  activemq_data:
    driver: local

networks:
  order-api-network:
    driver: bridge
