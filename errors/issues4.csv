fileProcessorHttpListener-Issues-SingleFilePath,,
S.No,Issue,Status
1,"In the first Transform Message, referencing payload is not required, as it throws an error when the payload is empty, especially when triggered from Postman.",Good to go
2,"One Transform Message connector has the attribute config-ref, which is invalid.

The Transform Message component does not require a config-ref attribute and it should be removed.",Blocker
3,"The variable fileName is missing the closing ] in the DataWeave logic.
The correct DataWeave expression should be:
lower((vars.filePath splitBy '/')[-1])
This extracts the file name from the file path and converts it to lowercase.",Good to go
4,"In the second Transform Message as well, referencing payload is not required, as it can lead to errors—especially if the payload is empty",Good to go
5,The variable fileType is unnecessary and can be removed. The logic can be used directly within the Choice condition without assigning it to a separate variable.,Good to go
6,"In the Choice condition, the expression mode is not enabled, which is required for proper evaluation.

You also need to update the condition to something like:
vars.fileName contains ""order""
Make sure to enable expression mode(#[]) and use the above condition in DataWeave syntax.",Good to go
7,"In the File Write operation, we are sending the payload as plain text (as done in SpringBoot).
To match that, the DataWeave script should be updated as follows:
%dw 2.0
output text/plain
---
payload",Good to go
8,"In the Transform Message (before the JMS Publish connector), the DataWeave script needs to be updated to match the Spring Boot logic.

Use the following corrected DataWeave expression:

%dw 2.0
output text/plain
---
""File: "" ++ vars.fileName ++ "", JMS Status: Processed Successfully""
This will produce a plain text message in the desired format.",Good to go
9,"In the YAML file:
Keys should not be enclosed in double quotes.
A space is required after the colon (:) for proper syntax.

Here is the corrected example:
spring.application.name: ""fileProcessorHttpListener""
server.port: ""8085""
http.host: ""0.0.0.0""
spring.activemq.broker-url: ""tcp://localhost:61616""

This follows proper YAML formatting standards.",Blocker
10,"Whenever we have a file exists condition in Java, we can handle it in MuleSoft by using the File List operation with a filenamePattern.
Then, apply the condition:
sizeOf(payload) > 0
If this condition is true, the file exists.
If it is false, the file does not exist.

Example:
<file:list doc:name=""List"" doc:id=""59a16738-fdd6-47cb-880b-ca8bd01a3193"" config-ref=""File_Config"" directoryPath=""C:\Files\SpringBoot-Mule-Files"">
?   <file:matcher filenamePattern=""Spring-Mule.txt"" />
</file:list>
<choice doc:name=""Choice"" doc:id=""23fc0707-46e5-489a-a327-39a9ba67c034"" >
    <when expression=""#[sizeOf(payload) &gt; 0]"">
??     <logger level=""INFO"" doc:name=""Logger"" doc:id=""479fc0c4-ed24-4e16-ad31-499683e67288"" message=""Exists""/>
??</when>
??<otherwise >
????  <logger level=""INFO"" doc:name=""Logger"" doc:id=""e55c9924-87f5-4e4e-a489-bc1d76a18756"" message=""Not Exists""/>
??</otherwise>
</choice>",Good to go
11,"The summary section under projectInformation is not being generated properly.
It must strictly follow the required structure as shown below.

""projectInformation"": {
    ""customization"": {},
    ""destinationPlatform"": ""mule"",
    ""processFiles"": [],
    ""projectName"": ""string"",
    ""sourceProjectType"": ""SpringBoot"",
    ""summary"": {
      ""totalComponents"": number,                // total activity count
      ""totalActivitiesCount"": number,           // total activity count
      ""totalFlowCount"": number,                 // total activity count
      ""totalGroupActivitiesCount"": number,      // total group activities count
      ""totalGlobalComponentsCount"": number,     // total global components count
      ""totalSIMFound"": 0,
      ""totalCodeFound"": 0,
      ""totalPackageFound"": 0,
      ""totalFunctionFound"": 0,
      ""fullyMigrated"": total activity count,    // total activity count
      ""partiallyMigrated"": 0,
      ""notMigrated"": 0,
      ""fullMigratedActivities"": [],
      ""partiallyMigratedActivities"": [],
      ""notMigratedActivities"": []
    }      
  }
Format for fullMigratedActivities in Summary
This array should contain unique mappings of activity types between the source (Spring Boot) and target (Mule) systems:
	- mule_activity: Target activity type in Mule
	- SB_activity: Source activity type from Spring Boot
	- count: Number of occurrences of that activity type

Example Json
[
  {
          ""mule_activity"": ""HTTP Listener"",   // Target Activity Type
          ""SB_activity"": ""HTTP Listener"",     // Source Activity Type
          ""count"": 1                          // Total Count of particular activity type
        },
        {
          ""mule_activity"": ""File Write"",
          ""SB_activity"": ""File Write"",
          ""count"": 3
        }
]",Blocker
12,"If there's any Logger activity in the Spring Boot code, we do need to show that in the JSON.",Good to go
13,"If there is any complex business logic involved, it is recommended to create a separate flow for that logic and use flow-ref to invoke it.
For example, separate flows can be created for Order, Invoice, and Inventory, and each of these can be referenced in the main flow using flow-ref.",Blocker
